\import Data.List
\import Function.Meta
\import Paths
\import lect03
\open Nat(+,*)

-- 1. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestnf => (17, 8, 13, 55, 18, 21)
\func fileTestProof : fileTestnf = fileTest => idp

-- 2. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func M5t'''nf => ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29))
\func M5t'''Proof : M5.t''' = M5t'''nf => idp

-- 3. Докажите ассоциативность ++.

\func ++-assoc {A : \Type} (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | a :: xs => pmap (\lam lst => a :: lst) (++-assoc xs ys zs)

-- 4. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | :: x xs => reverse xs ++ x :: nil

\func listNil {A : \Type} (xs : List A) : xs ++ nil = xs
  | nil => idp
  | a :: xs => pmap (\lam x => a :: x) $ listNil xs

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs
  | nil, nil => idp
  | nil, a :: ys => inv $ listNil (reverse ys ++ a :: nil)
  | a :: xs, nil => pmap (\lam lst => lst ++ a :: nil) (reverse++ xs nil)
  | a :: xs, b :: ys => pmap (\lam lst => lst ++ a :: nil) (reverse++ xs (b :: ys))
      *> ++-assoc (reverse ys ++ b :: nil) (reverse xs) (a :: nil)

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs
  | nil => idp
  | a :: xs => reverse++ (reverse xs) (a :: nil)
      *> pmap (\lam xs => a :: xs) (reverse-isInvolutive xs)

-- 5. Докажите дистрибутивность умножения над сложением для натуральных чисел.

\func +-assoc (x y z : Nat) : (x + y) + z = x + (y + z) \elim x
  | 0 => idp
  | suc x => pmap suc (+-assoc x y z)

\func +-comm (x y : Nat) : x + y = y + x \elim x
  | 0 => idp
  | suc x => pmap suc (+-comm x y)

\func +-comm3 (x y z : Nat) : x + y + z = x + z + y \elim x
  | 0 => +-comm y z
  | suc x => pmap suc (+-comm3 x y z)

\func +-comm4 (x y z w : Nat) : x + y + (z + w) = x + z + (y + w) \elim x
  | 0 => helper y z w
  | suc x => pmap suc (+-comm4 x y z w)
    \where {
      \func helper (y z w : Nat) : y + (z + w) = z + (y + w) \elim y
        | 0 => idp
        | suc y => pmap suc (helper y z w)
    }

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n
  | 0, 0, 0 => idp
  | 0, 0, suc k => idp
  | 0, suc m, 0 => idp
  | 0, suc m, suc k => idp
  | suc n, 0, 0 => pmap (\lam x => x) $ rdistr n 0 0
  | suc n, 0, suc k => pmap (\lam x => suc x + k) (rdistr n 0 (suc k))
      *> pmap suc (+-assoc (0 * n) (suc k * n) k)
  | suc n, suc m, 0 => pmap (\lam x => suc x + m) (rdistr n (suc m) 0)
      *> pmap (\lam x => suc $ x) (+-comm3 (suc m * n) (0 * n) m)
  | suc n, suc m, suc k => pmap (\lam x => (suc $ suc x) + (m + k)) (rdistr n (suc m) (suc k))
      *> pmap (\lam x => suc $ suc x) (+-comm4 (suc m * n) (suc k * n) m k)

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k
  | 0, 0, 0 => idp
  | 0, 0, suc k => idp
  | 0, suc m, 0 => idp
  | 0, suc m, suc k => ldistr 0 m k
  | suc n, 0, 0 => idp
  | suc n, 0, suc k => idp
  | suc n, suc m, 0 => idp
  | suc n, suc m, suc k => pmap (\lam x => suc $ suc $ x) $
  helperAllSuc (suc n * (m + k)) (suc n * m) (suc n * k) n (ldistr (suc n) m k)
  \where {
    \func helperAllSuc (x y1 y2 n : Nat) (p : x = y1 + y2) : x + n + n = y1 + n + (y2 + n) \elim n
      | 0 => p
      | suc n => pmap (\lam w => suc $ suc w) $ helperAllSuc x y1 y2 n p
  }

-- 6. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b'
  => transport (\lam x => f a b = f x b') p (pmap (\lam x => f a x) q)

-- 7. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B
  => transport (\lam f => f) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
  => repl (pmap (\lam x => B x) p) b
